import com.rameses.annotations.*;

class CloudPartnerRegistrationService {

    @DataContext("gdx_partner")
    def partner;	

    @XConnection("redis-cache")
    def cache;    	

    @XConnection("gdx-mq")
    def queueSvc;

    @XConnection("gdx-node-service")
    def nodeSvc;

    @Service("CloudPartnerService")
    def partnerSvc;


    @ProxyMethod
    public def registerChannel( def param ) {
        def key = "partner:"+param.id;
        def p = partner.find([id: param.id]).first();
        if(!p)
            throw new Exception("register channel failed. Partner not found");
        if(p.state!='ACTIVE')
            throw new Exception("register channel failed. Partner " + param.id + " is not active");
        cache.put(key, "0" );
        return p;
    } 

    @ProxyMethod
    public def unregisterChannel( def param ) {
        def key = "partner:"+param.id;
        cache.remove( key );
        return "OK";
    } 

    @ProxyMethod
    public def registerQueue( def param ) {
        def p = partner.find([id: param.id]).first();
        if(!p)
            throw new Exception("register queue failed. Partner not found");
        if(p.state!='ACTIVE')
            throw new Exception("register queue failed. Partner " + param.id + " is not active");
        queueSvc.addQueue( param.id, "gdx");
        return p;
    } 

    @ProxyMethod
    public def unregisterQueue( def param ) {
        queueSvc.removeQueue( param.id, "gdx");
        return "OK";
    } 

    @ProxyMethod
    public def updateRegistration() {
        def list = partnerSvc.getList();
        for(o in list) {
            def param = [id: o.id ];
            if(o.state.toString().toUpperCase()=='ACTIVE') {
                registerChannel(param);
                registerQueue(param);
                nodeSvc.post("register", [channel:o.id]);
            }
            else {
                unregisterChannel(param);
                unregisterQueue(param);
                nodeSvc.post("unregister", [channel:o.id]);
            }
        }
    }

}